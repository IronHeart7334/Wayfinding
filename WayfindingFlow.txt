The program begins in index.html

loads the index.js module, which sets the onload function of a div to initialize the program.
downloads the google api, after which it calls the aforementioned div's onload function.

initializing the program:
	Creates a Main object, which is used to store otherwise global variables
	a Canvas (not HTML canvas) interface to draw on the SVG element,
	and two TextBoxes interfaces to make working with the input boxes easier.
	
	the Canvas is then linked to the SVG element, so any calls to the Canvas' drawing methods will draw on the SVG.
	
	Next, the program downloads the data used by the program, then:
		Draws the map image downloaded from the data on the SVG element
		The NodeDB reads the response from the node position and connection files, creating many Node objects, representing points on campus,
		The Nodes' coordinate system is not the same as the SVG image's, so we have to scale them.
		Nodes -1 and -2 mark the upper leftmost and lower rightmost points on the campus, so all other nodes lie between them.
		After creating those Nodes, sets the Canvas' corners to nodes -1 and -2. This means whatever coordinates node -1 has translate to the upper-left corner of the SVG element, and node -2 corresponds to the lower right.
		With that in mind, each Node's coordinates are a set percentage of the way between Nodes -1 and -2's coordinates, and thus are the same percentage of the way between them on the SVG image.
		
		Next, the NodeDB constructs a string to node ID table of buildings, rooms, and other labels.
		the Main object populates the two input boxes with all the strings from this table, meaning that when the user starts typing, the string that most closely matches what they are typing will appear below the input box.
		the program then reads the parameters passed to the URL, and if any of the parameters are "startID=" or "endID=", it will set the default path's start and end points based on the node IDs passed in.
		draw the current path.

Upon receiving input, the input boxes will search through their "options" for what closest matches what is being typed, then displays the match.
Upon clicking the "Draw Path" button, takes the closest match from the two input boxes, and grabs the corresponding node ids from the NodeDB
these node IDs are then used to construct a path using Djdkstra's algorithm, then, if the result is valid, sets the Main object's path to the newly constructed one.

What each file does:
	/dataFormatting
		-csv.js: provides functions for "reverting" the csv files downloaded by the program from just a string of comma seperated values back into a two-dimensional 	array.
		-nodeDB.js: acts as a fake database to store the data used by the program.
	/getRequests
		-importData.js imports data from the google drive into the program.
	/htmlInterface
		-infoElement.js: used to display URLs contained in the last node in the current path.
		-input.js: provides the TextBox interface that works with those two boxes that the user types into.
		-qrCodes.js: qrCodes.js allows us to extract parameters from the URL, so we can make QR codes which allows us to set a default path.
		-scaledCanvas.js: is used as an interface to draw nodes on the SVG element.
			the first version of wayfinding used latitude and longitude for node coordinates,
			then later versions used real-world measurement (feet, miles, whatever),
			and now they use some arbitrary coordinates.
			Given that we can't guarantee that the nodes will occupy the exact size needed by the program, we need to scale them.
			scaledCanvas converts these arbitrary coordinates to points on the SVG,
			given the assumption that the point (0, 0) on the SVG is node -1, and the lower right corner is node -2.
	/nodes
		-arcNode.js: contains the Node class.
		-path.js: provides the Path class, used to find paths between nodes.
	/webpages
		-index.js: contains all the code to run once google api is loaded
	
	main.js provides the Main class, which is used to store otherwise global variables. One is created by index.js, then stuff gets passed into it. We can then pass the Main object to whatever function we want so it can access the "global" variables.
